# Generated by Django 3.0.4 on 2020-07-23 06:41

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_email_confirmation.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Authors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(default='author_name', max_length=200)),
            ],
            options={
                'db_table': 'authors',
            },
        ),
        migrations.CreateModel(
            name='Books',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_title', models.CharField(default='book_title', max_length=200)),
                ('book_synopsis', models.TextField(default='default_book_synopsis')),
                ('book_publisher', models.CharField(default='default_publisher', max_length=200)),
                ('publication_date', models.DateField(default=datetime.date.today)),
                ('genre', models.CharField(choices=[('Action', 'ACTION'), ('Adventure', 'ADVENTURE'), ('Childrens', 'CHILDRENS'), ('Classic', 'CLASSIC'), ('Comic', 'COMIC'), ('Crime', 'CRIME'), ('Drama', 'DRAMA'), ('Fantasy', 'FANTASY'), ('Horror', 'HORROR'), ('Mystery', 'MYSTERY'), ('Poetry', 'POETRY'), ('Scifi', 'SCIFI'), ('Suspense', 'SUSPENSE'), ('Thriller', 'THRILLER'), ('Humor', 'HUMOR'), ('Religion', 'RELIGION'), ('Philosphy', 'PHILOSOPHY'), ('Textbook', 'TEXTBOOK'), ('Travel', 'TRAVEL'), ('Sports', 'SPORTS')], default='Adventure', max_length=50)),
                ('average_rating', models.FloatField(default=0.0)),
            ],
            options={
                'db_table': 'books',
            },
        ),
        migrations.CreateModel(
            name='Collections',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_type', models.CharField(choices=[('Main', 'MAIN'), ('Named', 'NAMED'), ('Finished', 'FINISHED')], default='Main', max_length=10)),
                ('is_private', models.BooleanField(default=False)),
                ('description', models.TextField(default='collection_description')),
                ('collection_name', models.CharField(default='default_collection_name', max_length=200)),
                ('count', models.IntegerField(default=0)),
                ('date_created', models.DateTimeField(default=datetime.datetime.now)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='collection_list', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'collection',
            },
        ),
        migrations.CreateModel(
            name='WrittenBy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='app.Authors')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='written_by', to='app.Books')),
            ],
            options={
                'db_table': 'written_by',
            },
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review', models.TextField(blank=True, default='default_review_text')),
                ('rating', models.IntegerField(choices=[(1, '1_STAR'), (2, '2_STAR'), (3, '3_STAR'), (4, '4_STAR'), (5, '5_STAR')])),
                ('date', models.DateField(default=datetime.date.today)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='for_book', to='app.Books')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='by_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reviews',
            },
        ),
        migrations.CreateModel(
            name='Reads',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read_by', to='app.Books')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reader', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reads',
            },
        ),
        migrations.CreateModel(
            name='Profiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verification_code', models.CharField(default='XYZ', max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'profiles',
            },
            bases=(simple_email_confirmation.models.SimpleEmailConfirmationUserMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Contains',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_added', models.DateTimeField(default=datetime.datetime.now)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='within', to='app.Books')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contains', to='app.Collections')),
            ],
            options={
                'db_table': 'contains',
            },
        ),
    ]
